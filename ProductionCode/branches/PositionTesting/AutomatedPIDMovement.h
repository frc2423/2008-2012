/**	\file 		AutomatedPIDMovement.h	\author 	Dustin Spicuzza: last changed by $Author: dspicuzz $	\date 		Last changed on $Date: 2009-01-30 01:53:08 -0500 (Fri, 30 Jan 2009) $	\version 	$Rev: 71 $*/#ifndef _KWARQS_AUTOMATEDPIDMOVEMENT_H#define _KWARQS_AUTOMATEDPIDMOVEMENT_H#include "Framework/KwarqsMovementControl.h"#include "Framework/TunablePIDController.h"#include "Framework/PositionInformation.h"#include <vector>// describes the pathstruct PathElement {	float x;	float y;	float speed;		// max speed to do on this leg of the path		PathElement(float _x, float _y, float _speed) :		x(_x), y(_y), speed(_speed)	{}};/// used to act as an interface between the PIDController and our other classclass PidInterface : public PIDSource {public:	PidInterface() :		m_info(PositionInformation::GetInstance())	{}	// returns the angle the bot is currently facing	double PIDGet()	{		return fmod(m_info->GetAngle, 360.0);	}		// writes the difference	void PIDWrite(float output)	{		m_output = output;	}		// be lazy, don't bother with a getter for this	float m_output;	private:	PositionInformation * m_info;};class AutomatedPIDMovement : public KwarqsMovementControl {	typedef std::vector<PathElement>		PathContainer;	typedef PathContainer::iterator			PathIterator;public:	AutomatedPIDMovement();	void Move();	const char * Name() { return "AutomatedPIDMovement"; }		void OnEnable();	void OnDisable();		// a way to set the path	//void SetPath();	private:	// pid object to control movement	TunablePIDController 	m_heading_pid;		// and its interface	PidInterface			m_pid_interface;	// pointer to the global positioning object	PositionInformation * 	m_info;		// path objects	PathContainer			m_path;	};#endif