import wpilib# define the kicker states hereSTATE_IDLE              = 1STATE_START_KICK        = 2STATE_RELEASE           = 3STATE_RESET             = 4# the switch on the driver station that we use to indicate # whether the roller should be on or off HAS_BALL_OUTPUT         = 1ROLLER_ON_INPUT         = 2# delays between transitions in the kicker state machineROLLER_TIME_DELAY       = 0.1KICKER_RELEASE_PERIOD   = 0.5 # define the FPGA object numbers requiredSOLENOID_ENGAGE         = 1SOLENOID_RELEASE        = 2ROLLER_MOTOR            = 3BALL_DETECTOR_INPUT     = 10class Kicker:    def __init__(self):        '''Constructor for a kicker object'''            # initialize needed WPILib elements        self.compressor = wpilib.Compressor( 6, 1 )        self.compressor.Start()                self.time_elapsed = wpilib.Timer()        self.time_elapsed.Start()                self.engage = wpilib.Solenoid( SOLENOID_ENGAGE )        self.release = wpilib.Solenoid( SOLENOID_RELEASE )                self.roller = wpilib.Jaguar( ROLLER_MOTOR )        self.ball_detector = wpilib.DigitalInput( BALL_DETECTOR_INPUT )                # instance initialization        self.state = STATE_IDLE                # convenience function        self.ds = wpilib.DriverStation.GetInstance()            def kick(self):        '''Triggers a kick'''                # only do a kick if it is currently not kicking        if self.is_kicking():            return                    self.__set_roller_backward()        self.state = STATE_START_KICK        self.time_elapsed.Reset()                def has_ball(self):        '''returns true if the ball sensor detects that we have caught a ball'''        return self.ball_detector.Get()            def is_kicking(self):        ''' returns true if currently kicking '''        return self.state != STATE_IDLE            def roller_enabled(self):        '''Returns true if the user intends the roller to be on'''        return self.ds.GetDigitalIn( ROLLER_ON_INPUT )            def __set_roller_forward(self):        '''Internal: Ball roller in the normal direction'''                if self.roller_enabled():            self.roller.Set( -1.0 )        else:            self.roller.Set( 0 )                    def __set_roller_backward(self):        '''Internal: reverses the ball roller'''                if self.roller_enabled():            self.roller.set( 1.0 )        else:            self.roller.Set( 0 )            def do_actions(self):        '''            This gets called in the main loop and executes the kicker's             state machine        '''                #        # Set an indicator for the user to tell them that we have detected         # a ball is present        #        self.ds.SetDigitalOut( HAS_BALL_OUTPUT, self.has_ball() )                if self.state == STATE_IDLE:                    #            # this is the normal running state            #                        self.__set_roller_forward()            self.engage.Set( False )            self.release.Set( False )                    elif self.state == STATE_START_KICK:                    #            # this state engages the pnuematics to perform the kick            # appropriately after a short delay            #                        if self.time_elapsed.HasPeriodPassed( ROLLER_TIME_DELAY ):                            # if time is up, next state                self.state = STATE_RELEASE                self.time_elapsed.Reset()                            self.__set_roller_backward()                self.engage.Set( True )                self.release.Set( False )                                elif self.state == STATE_RELEASE:                    #            # this state waits for the pneumatics to fully release            # before bringing them back            #                    if self.time_elapsed.HasPeriodPassed( KICKER_RELEASE_PERIOD ):                            # if time is up, next state                self.state = STATE_RESET                self.time_elapsed.Reset()                                self.__set_roller_forward()                self.engage.Set( False )                self.release.Set( True )                                elif self.state == STATE_RESET:                    #			# this state waits for the pneumatics to come back to their			# starting position and then we fall back to idle mode            #                        if self.time_elapsed.HasPeriodPassed( KICKER_RELEASE_PERIOD ):                            # if time is up, go to the idle state                self.state = STATE_IDLE                    else:            # should never get here            raise RuntimeError("Internal error in kicker state machine")                